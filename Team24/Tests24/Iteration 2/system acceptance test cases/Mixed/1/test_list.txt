1 - Select all procedures
2 - Select all assignments
3 - Select all variables
4 - Select all constants
5 - Select all call statements
6 - Select all read statements
7 - Select all print statements
8 - Select all while statements
9 - Select all if statements

/********* (NOT INCLUDED) Meaningless Queries *********/
- Select BOOLEAN with 24 = 22 (FALSE)
- Select a1 with a.stmt# = 24; (returns all assg stmt #)
- Select <p1, p2> such that Modifies(a, "a") (returns all combinations of procedures if have assg stmt modifying m)

/********* Follows *********/
- Select BOOLEAN such that Follows(#, #) = True (consecutive)
- Select p such that Follows(#, #) = True (within blocks)
- Select <variable, while> such that Follows(#, #) = True (next stmt after if/while)

- Select BOOLEAN such that Follows(#, #) = False (True if Follows*)
- Select BOOLEAN such that Follows(#, #) = False (Wrong order)
- Select print statements such that Follows(#, #) = False (Within if/while block)
- Select r.stmt# such that Follows(#, #) = False (Invalid stmt number - 0)
- Select <if, while> such that Follows(#, #) = False (Out of range stmt number)

- Select BOOLEAN such that Follows(s, #) where # is the start of new if block (FALSE)
- Select BOOLEAN such that Follows(#, s) where # is the start of new if block (TRUE)
- Select s such that Follows(s, #) where # is the start of new while block (FALSE)
- Select s such that Follows(#, s) where # is the start of new while block (TRUE)
- Select s such that Follows(s, #) where # is a if stmt
- Select s such that Follows(s, #) where # is a while stmt
- Select <s, cs> such that Follows(#, s) where # is a if stmt (constants x s)
- Select <p1, p2> such that Follows(#, s) where # is a while stmt (combination of all procedures)

- Select BOOLEAN such that Follows(r, a)
- Select r such that Follows(a, r)
- Select BOOLEAN such that Follows(pn, a)
- Select pn such that Follows(a, pn)
- Select c such that Follows(a, c)
- Select if such that Follows(a, if)
- Select w such that Follows(w, s)
- Select a such that Follows(a, w)
- Select w such that Follows(w, if)
- Select if such that Follows(if, w)
- Select <a1, a2> such that Follows(a1, a2)
- Select <w1, w2> such that Follows(w1, w2)
- Select <if1, if2> such that Follows(if1, if2)

- Select BOOLEAN such that Follows(_, _) (TRUE; Meaningless query)
- Select w such that Follows(w, _)
- Select if such that Follows(if, _)
- Select a such that Follows(_, a)
- Select cs such that Follows(6, _) = True
- Select pn such that Follows(#, _) = False (# is out of range)

- Syntax Error: stmt s; while w; if ifs; Select x such that Follows(#, _)
- Syntax Error: stmt s; while w; if ifs; Select w such that Follows(#, x)

/********* Follows* *********/
- Select BOOLEAN such that Follows*(#, #) = True (consecutive)
- Select p.procName such that Follows*(#, #) = True (within blocks)
- Select <variable, while> such that Follows*(#, #) = True (next stmt after if/while)
- Select BOOLEAN such that Follows*(#, #) = True (False if Follows)

- Select BOOLEAN such that Follows*(#, #) = False (Wrong order)
- Select print statements such that Follows*(#, #) = False (Within if/while block)
- Select read statements such that Follows*(#, #) = False (Invalid stmt number - 0)
- Select <if, while> such that Follows*(#, #) = False (Out of range stmt number)

- Select BOOLEAN such that Follows*(s, #) where # is the start of new if block (FALSE)
- Select BOOLEAN such that Follows*(#, s) where # is the start of new if block (TRUE)
- Select s such that Follows*(s, #) where # is the start of new while block (FALSE)
- Select s such that Follows*(#, s) where # is the start of new while block (TRUE)
- Select s such that Follows*(s, #) where # is a if stmt
- Select s such that Follows*(s, #) where # is a while stmt
- Select <s, cs> such that Follows*(#, s) where # is a if stmt (constants x s)
- Select <p1, p2> such that Follows*(#, s) where # is a while stmt (combination of all procedures)

- Select BOOLEAN such that Follows*(r, a)
- Select r such that Follows*(a, r)
- Select BOOLEAN such that Follows*(pn, a)
- Select pn such that Follows*(a, pn)
- Select c such that Follows*(a, c)
- Select if such that Follows*(a, if)
- Select w.stmt# such that Follows*(w, s)
- Select a such that Follows*(a, w)
- Select w such that Follows*(w, if)
- Select if such that Follows*(if, w)
- Select <a1, a2> such that Follows*(a1, a2)
- Select <w1, w2> such that Follows*(w1, w2)
- Select <if1, if2> such that Follows*(if1, if2)

- Select BOOLEAN such that Follows*(_, _) (TRUE; Meaningless query)
- Select w such that Follows*(w, _)
- Select if such that Follows*(if, _)
- Select a such that Follows*(_, a)
- Select cs such that Follows*(6, _) = True
- Select pn such that Follows*(#, _) = False (# is out of range)

- Syntax Error: stmt s; while w; if ifs; Select x such that Follows*(#, _)
- Syntax Error: stmt s; while w; if ifs; Select w such that Follows*(#, x)

/********* Parent *********/
- Select BOOLEAN such that Parent(#, #) = True (Direct nesting if)
- Select procedure such that Parent(#, #) = True (Direct nesting 2nd if)
- Select <w, w> such that Parent(#, #) = True (Direct nesting while)

- Select BOOLEAN such that Parent(#, #) = False (True if Parent* - Multiple Nesting)
- Select BOOLEAN such that Parent(#, #) = False (True if Parent* - Multiple Nesting)
- Select BOOLEAN such that Parent(#, #) = False (Wrong order)
- Select print statements such that Parent(#, #) = False (Within same levels)
- Select print statements such that Parent(#, #) = False (Within same levels; if-else)
- Select read statements such that Parent(#, #) = False (Invalid stmt number - 0)
- Select <if, while> such that Parent(#, #) = False (Out of range stmt number)

- Select BOOLEAN such that Parent(s, #) where # is a top level stmt (FALSE)
- Select <p1, p2> such that Parent(s, #) where # is a stmt in if block - second level block (TRUE)
- Select s such that Parent(s, #) where # is a stmt in while block - third level block (TRUE)
- Select s such that Parent(#, s) where # is not if/while (FALSE)
- Select s.stmt# such that Parent(#, s) where # is a if stmt - first level (TRUE)
- Select s such that Parent(#, s) where # is a while stmt - second level (TRUE)

- Select BOOLEAN such that Parent(r, a) (FALSE)
- Select a such that Parent(a, if) (FALSE)
- Select if such that Parent(if, a)
- Select <r, w> such that Parent(r, w) (FALSE)
- Select a such that Parent(w, a)
- Select w such that Parent(w, if)
- Select if such that Parent(if, w)
- Select <w1, w2> such that Parent(w1, w2)
- Select <if1, if2> such that Parent(if1, if2)

- Select BOOLEAN such that Parent(_, _) (TRUE; Meaningless query)
- Select w such that Parent(w, _)
- Select if such that Parent(if, _)
- Select w such that Parent(_, w)
- Select if such that Parent(_, if)
- Select a such that Parent(_, a)
- Select a such that Parent(a, _) = False
- Select pn such that Parent(#, _) = False
- Select cs such that Parent(#, _) = True

- Syntax Error: stmt s; while w; if ifs; Select x such that Parent(#, _)
- Syntax Error: stmt s; while w; if ifs; Select w such that Parent(#, x)

/********* Parent* *********/
- Select BOOLEAN such that Parent*(#, #) = True (Direct nesting if-if)
- Select procedure such that Parent*(#, #) = True (Direct nesting if-while)
- Select constant such that Parent*(#, #) = True (Direct nesting while-if)
- Select <if, while> such that Parent*(#, #) = True (Direct nesting while-while)
- Select variables such that Parent*(#, #) = True (False if Parent - Multiple Nesting - 3 levels)
- Select c.stmt# such that Parent*(#, #) = True (False if Parent - Multiple Nesting - 4 levels)

- Select BOOLEAN such that Parent*(#, #) = False (Wrong order)
- Select print statements such that Parent*(#, #) = False (Within same levels)
- Select print statements such that Parent*(#, #) = False (Within same levels; if-else)
- Select read statements such that Parent*(#, #) = False (Invalid stmt number - 0)
- Select <if, while> such that Parent*(#, #) = False (Out of range stmt number)

- Select BOOLEAN such that Parent*(s, #) where # is a top level stmt (FALSE)
- Select <p1, p2> such that Parent*(s, #) where # is a stmt in if block - second level block (TRUE)
- Select s such that Parent*(s, #) where # is a stmt in while block - third level block (TRUE)
- Select s such that Parent*(#, s) where # is not if/while (FALSE)
- Select s such that Parent*(#, s) where # is a if stmt - first level (TRUE)
- Select s such that Parent*(#, s) where # is a while stmt - second level (TRUE)

- Select BOOLEAN such that Parent*(r, a) (FALSE)
- Select a such that Parent*(a, if) (FALSE)
- Select if such that Parent*(if, a)
- Select <w, pn> such that Parent*(pn, w) (FALSE)
- Select a such that Parent*(w, a)
- Select w such that Parent*(w, if)
- Select if such that Parent*(if, w)
- Select <w1, w2> such that Parent*(w1, w2)
- Select <if1, if2> such that Parent*(if1, if2)

- Select BOOLEAN such that Parent*(_, _) (TRUE; Meaningless query)
- Select w such that Parent*(w, _)
- Select if such that Parent*(if, _)
- Select w such that Parent*(_, w)
- Select if such that Parent*(_, if)
- Select a such that Parent*(_, a)
- Select a such that Parent*(a, _) = False
- Select pn such that Parent*(#, _) = False
- Select cs such that Parent*(#, _) = True

- Syntax Error: stmt s; while w; if ifs; Select x such that Parent*(#, _)
- Syntax Error: stmt s; while w; if ifs; Select w such that Parent*(#, x)

/********* Uses *********/
// Uses(#, #) = True where # is given
- Select BOOLEAN such that Uses(#, v) = True for given a and v
- Select pn.stmt# such that Uses(#, v) = True for given pn and v
- Select w such that Uses(#, v) = True for given s and v
- Select <p1, p2> such that Uses(#, v) = True for given c and v
- Select v such that Uses(p, v) = True for given p and v
// Uses(#, #) = False where # is given
- Select print statements such that Uses(#, v) = False (General False)
- Select BOOLEAN such that Uses(v, #) = False (Wrong order)
- Select print statements such that Uses(#, v) = False (Invalid variable - Procedure name used instead)
- Select read statements such that Uses(#, v) = False (Invalid stmt number - 0)
- Select <if, while> such that Uses(#, v) = False (Out of range stmt number)

// Uses(s, #) or Uses(#, v)
- Select BOOLEAN such that Uses(#, v) = True for given a and v
- Select pn such that Uses(#, v) = True for given pn and v
- Select w such that Uses(#, v) = True for given s and v
- Select <p1, p2> such that Uses(#, v) = True for given c and v
- Select v such that Uses(p, v) = True for given p and v

- Select pn such that Uses(#, v) = False (General False)
- Select BOOLEAN such that Uses(v, #) = False (Wrong order)
- Select pn such that Uses(#, v) = False (Invalid variable - Procedure name used instead)
- Select pn such that Uses(#, v) = False (Invalid stmt number - 0)
- Select <if, while> such that Uses(#, v) = False (Out of range stmt number)

// Uses(s, s)
- Select <a, v> such that Uses(a, v)
- Select <pn, v> such that Uses(pn, v)
- Select <s, v> such that Uses(s, v)
- Select <p, v> such that Uses(p, v)
- Select <c, v> such that Uses(c, v)

// Uses(_, _)
- Select BOOLEAN such that Uses(_, _) (TRUE; Meaningless query)
- Select v such that Uses(_, v)
- Select a.stmt# such that Uses(a, _)
- Select pn such that Uses(pn, _)
- Select s.stmt# such that Uses(s, _)
- Select p such that Uses(p, _)
- Select c such that Uses(c, _)
- Select pn such that Uses(#, _) = False (# is out of range)

- Syntax Error: stmt s; variable v; call c; Select x such that Uses(c, v)
- Syntax Error: stmt s; variable v; print pn; Select w such that Uses(x, v)

/********* Modifies *********/
// Modifies(#, #)
- Select BOOLEAN such that Modifies(#, v) = True for given a and v
- Select pn such that Modifies(#, v) = True for given pn and v
- Select w such that Modifies(#, v) = True for given s and v
- Select <p1, p2> such that Modifies(#, v) = True for given c and v
- Select v such that Modifies(p, v) = True for given p and v

- Select print statements such that Modifies(#, v) = False (General False)
- Select BOOLEAN such that Modifies(v, #) = False (Wrong order)
- Select print statements such that Modifies(#, v) = False (Invalid variable - Procedure name used instead)
- Select read statements such that Modifies(#, v) = False (Invalid stmt number - 0)
- Select <if, while> such that Modifies(#, v) = False (Out of range stmt number)

// Modifies(s, #)
- Select BOOLEAN such that Modifies(#, v) = True for given a and v
- Select r such that Modifies(#, v) = True for given r and v
- Select w such that Modifies(#, v) = True for given s and v
- Select <p1, p2> such that Modifies(#, v) = True for given c and v
- Select v such that Modifies(p, v) = True for given p and v

- Select r such that Modifies(#, v) = False (General False)
- Select BOOLEAN such that Modifies(v, #) = False (Wrong order)
- Select r such that Modifies(#, v) = False (Invalid variable - Procedure name used instead)
- Select r such that Modifies(#, v) = False (Invalid stmt number - 0)
- Select <if, while> such that Modifies(#, v) = False (Out of range stmt number)

// Modifies(s, s)
- Select <a, v> such that Modifies(a, v)
- Select <r, v> such that Modifies(r, v)
- Select <, v> such that Modifies(s, v)
- Select <p, v> such that Modifies(p, v)
- Select <c, v> such that Modifies(c, v)

// Modifies(_, _)
- Select BOOLEAN such that Modifies(_, _) (TRUE; Meaningless query)
- Select v.stmt# such that Modifies(_, v)
- Select a such that Modifies(a, _)
- Select r such that Modifies(r, _)
- Select s.stmt# such that Modifies(s, _)
- Select p such that Modifies(p, _)
- Select c such that Modifies(c, _)
- Select pn such that Modifies(#, _) = False (# is out of range)

- Syntax Error: stmt s; variable v; call c; Select x such that Modifies(c, v)
- Syntax Error: stmt s; variable v; print pn; Select w such that Modifies(x, v)

/********* Calls procedure *********/
// Calls(NAME, NAME)
- Select BOOLEAN such that Calls(#, #) = True (Direct Call)
- Select p.procName such that Calls(#, #) = True (Direct Call)
- Select <p1, p2> such that Calls(#, #) = True (Direct Call)

- Select BOOLEAN such that Calls(#, #) = False (Indirect Call - 2nd)
- Select p such that Calls(#, #) = False (Indirect Call - 3rd)
- Select p.procName such that Calls(#, #) = False (Wrong order)
- Select <p1, p2> such that Calls(#, #) = False (Invalid Procedure Name)

// Calls(NAME, p) or Calls(p, NAME) - one value written
- Select p such that Calls(NAME, p) (NAME = topmost)
- Select p.procName such that Calls(p, NAME) (NAME = inner most)
- Select p.stmt# such that Calls(NAME, p) (NAME is invalid)

// Calls(s, s)
- Select BOOLEAN such that Calls(p, w) (FALSE - not a procedure)
- Select p1 such that Calls(p1, p2)
- Select <p1, p2> such that Calls(p1, p2)

// Calls(_, _)
- Select BOOLEAN such that Calls(_, _) (TRUE; Meaningless query)
- Select p such that Calls(p, _)
- Select p.procName such that Calls(_, p)
- Select a such that Calls(_, a) (invalid - use stmt number instead of procedure)

- Syntax Error: stmt s; procedure p1, p2; Select <p1, p2> such that Calls(p1, p2) (Wrong due to missing "")
- Syntax Error: stmt s; procedure p1, p2; Select x such that Calls(p1, p2)
- Syntax Error: stmt s; procedure p1, p2; Select p1 such that Calls(x, p1)

/********* Calls* procedure *********/
// Calls*(NAME, NAME)
- Select BOOLEAN such that Calls*(#, #) = True (Direct Call)
- Select p.procName such that Calls*(#, #) = True (Indirect Call - 2nd)
- Select <p1, p2> such that Calls*(#, #) = True (Indirect Call - 3rd)

- Select p.procName such that Calls*(#, #) = False (Wrong order)
- Select <p1, p2> such that Calls*(#, #) = False (Invalid Procedure Name)

// Calls*(NAME, p) or Calls*(p, NAME) - one value written
- Select p such that Calls*(NAME, p) (NAME = topmost)
- Select p.procName such that Calls*(p, NAME) (NAME = inner most)
- Select p.stmt# such that Calls*(NAME, p) (NAME is invalid)

// Calls(s, s)
- Select BOOLEAN such that Calls*(p, w) (FALSE - not a procedure)
- Select p1 such that Calls*(p1, p2)
- Select <p1, p2> such that Calls*(p1, p2)

// Calls(_, _)
- Select BOOLEAN such that Calls*(_, _) (TRUE; Meaningless query)
- Select p such that Calls*(p, _)
- Select p.procName such that Calls*(_, p)
- Select a such that Calls*(_, a) (invalid - use stmt number instead of procedure)

- Syntax Error: stmt s; procedure p1, p2; Select <p1, p2> such that Calls*(p1, p2) (Wrong due to missing "")
- Syntax Error: stmt s; procedure p1, p2; Select x such that Calls*(p1, p2)
- Syntax Error: stmt s; procedure p1, p2; Select p1 such that Calls*(x, p1)

/********* Next prog_line: a, pn, r, c, w, if, s (same procedure) *********/
// Next(#, #)
- Select BOOLEAN such that Next(#, #) = True (executed immediately)
- Select n such that Next(#, #) = True (ifStmt - withinIf)
- Select s.stmt# such that Next(#, #) = True (ifStmt - withinElse)
- Select c such that Next(#, #) = True (whileStmt - withinWhile)
- Select a such that Next(#, #) = True (withinIf - outsideIfElse)
- Select <p1, p2> such that Next(#, #) = True (withinWhile - outsideWhile)

- Select BOOLEAN such that Next(#, #) = False (True for Next* - executed some line after - if)
- Select v such that Next(#, #) = False (True for Next* - executed some line after - while)
- Select if such that Next(#, #) = False (Not Same Procedure - Call)
- Select w such that Next(#, #) = False (Wrong order)
- Select n such that Next(#, #) = False (Invalid stmt number - 0)
- Select <if, w> such that Next(#, #) = False (Out of range stmt number)

// Next(s, #)
- Select BOOLEAN such that Next(if, #) (ifStmt - withinIf) 
- Select if.stmt# such that Next(if, #) (ifStmt - withinElse)
- Select w such that Next(w, #) (whileStmt - withinWhile)
- Select <w, cs> such that Next(w, #) (whileStmt - withinWhile) (c x cs)
- Select s.stmt# such that Next(#, s) (withinIf - outsideIfElse)
- Select s1 such that Next(s1, #) (withinWhile - outsideWhile)
- Select BOOLEAN such that Next(p, s) (p is invalid for prog_line)

// Next(s, s)
- Select a such that Next(if, a) (ifStmt - withinIf)
- Select a.stmt# such that Next(if, a) (ifStmt - withinElse)
- Select c such that Next(w, s) (whileStmt - withinWhile)
- Select <c, cs> such that Next(w, s) (whileStmt - withinWhile) (c x cs)
- Select s1.stmt# such that Next(s1, s2) (withinIf - outsideIfElse)
- Select <s1, s2> such that Next(s1, s2) (withinWhile - outsideWhile)

// Next(_, _)
- Select BOOLEAN such that Next(_, _) (TRUE; Meaningless query)
- Select if such that Next(if, _)
- Select <p, if> such that Next(_, if) (p x a where all if are True)
- Select p such that Next(w, _) (returns all p is Next(w, _) is True)
- Select w such that Next(_, w)
- Select a such that Next(_, a)
- Select cs such that Next(6, _) = True
- Select c such that Next(6, _) = True
- Select pn such that Next(#, _) = False (# is out of range)

- Syntax Error: stmt s; prog_line n1, n2; Select x such that Next(n1, n2)
- Syntax Error: stmt s; prog_line n1, n2; Select n1 such that Next(n1, x)

/********* Next* prog_line *********/
// Next*(#, #)
- Select BOOLEAN such that Next*(#, #) = True (executed immediately)
- Select n such that Next*(#, #) = True (ifStmt - withinIf)
- Select s.stmt# such that Next*(#, #) = True (ifStmt - withinElse)
- Select c such that Next*(#, #) = True (whileStmt - withinWhile)
- Select a such that Next*(#, #) = True (withinIf - outsideIfElse)
- Select <p1, p2> such that Next*(#, #) = True (withinWhile - outsideWhile)
- Select BOOLEAN such that Next*(#, #) = True (False for Next - executed some line after - if)
- Select v such that Next*(#, #) = True (False for Next - executed some line after - while)

- Select if such that Next*(#, #) = False (Not Same Procedure - Call)
- Select w such that Next*(#, #) = False (Wrong order)
- Select n such that Next*(#, #) = False (Invalid stmt number - 0)
- Select <if, w> such that Next*(#, #) = False (Out of range stmt number)

// Next*(s, #)
- Select BOOLEAN such that Next*(if, #) (ifStmt - withinIf) 
- Select if.stmt# such that Next*(if, #) (ifStmt - withinElse)
- Select w such that Next*(w, #) (whileStmt - withinWhile)
- Select <w, cs> such that Next*(w, #) (whileStmt - withinWhile) (c x cs)
- Select s.stmt# such that Next*(#, s) (withinIf - outsideIfElse)
- Select s1 such that Next*(s1, #) (withinWhile - outsideWhile)
- Select BOOLEAN such that Next*(p, s) (p is invalid for prog_line)

// Next*(s, s)
- Select a such that Next*(if, a) (ifStmt - withinIf)
- Select a.stmt# such that Next*(if, a) (ifStmt - withinElse)
- Select c such that Next*(w, s) (whileStmt - withinWhile)
- Select <c, cs> such that Next*(w, s) (whileStmt - withinWhile) (c x cs)
- Select s1.stmt# such that Next*(s1, s2) (withinIf - outsideIfElse)
- Select <s1, s2> such that Next*(s1, s2) (withinWhile - outsideWhile)

// Next*(_, _)
- Select BOOLEAN such that Next*(_, _) (TRUE; Meaningless query)
- Select if such that Next*(if, _)
- Select <p, if> such that Next*(_, if) (p x a where all if are True)
- Select p such that Next*(w, _) (returns all p is Next(w, _) is True)
- Select w such that Next*(_, w)
- Select a such that Next*(_, a)
- Select cs such that Next*(6, _) = True
- Select c such that Next*(6, _) = True
- Select pn such that Next*(#, _) = False (# is out of range)

- Syntax Error: stmt s; prog_line n1, n2; Select x such that Next*(n1, n2)
- Syntax Error: stmt s; prog_line n1, n2; Select n1 such that Next*(n1, x)

/********* Affects assignment (same procedure) *********/ ---------------
// Affects(#, #)
- Select BOOLEAN such that Affects(#, #) = True (consecutive)
- Select p such that Affects(#, #) = True (with call in between that does not modifies)
- Select <variable, while> such that Follows(#, #) = True (next stmt after if/while)

- Select BOOLEAN such that Affects(#, #) = False (with call in between that modifies)
- Select BOOLEAN such that Follows(#, #) = False (Wrong order)
- Select print statements such that Follows(#, #) = False (Within if/while block)
- Select r.stmt# such that Follows(#, #) = False (Invalid stmt number - 0)
- Select <if, while> such that Follows(#, #) = False (Out of range stmt number)

// Affects(s, #)
- Select BOOLEAN such that Follows(s, #) where # is the start of new if block (FALSE)
- Select BOOLEAN such that Follows(#, s) where # is the start of new if block (TRUE)
- Select s such that Follows(s, #) where # is the start of new while block (FALSE)
- Select s such that Follows(#, s) where # is the start of new while block (TRUE)
- Select s such that Follows(s, #) where # is a if stmt
- Select s such that Follows(s, #) where # is a while stmt
- Select <s, cs> such that Follows(#, s) where # is a if stmt (constants x s)
- Select <p1, p2> such that Follows(#, s) where # is a while stmt (combination of all procedures)

// Affects(s, s)
- Select BOOLEAN such that Follows(r, a)
- Select r such that Follows(a, r)
- Select BOOLEAN such that Follows(pn, a)
- Select pn such that Follows(a, pn)
- Select c such that Follows(a, c)
- Select if such that Follows(a, if)
- Select w such that Follows(w, s)
- Select a such that Follows(a, w)
- Select w such that Follows(w, if)
- Select if such that Follows(if, w)
- Select <a1, a2> such that Follows(a1, a2)
- Select <w1, w2> such that Follows(w1, w2)
- Select <if1, if2> such that Follows(if1, if2)

// Affects(_, _)
- Select BOOLEAN such that Follows(_, _) (TRUE; Meaningless query)
- Select w such that Follows(w, _)
- Select if such that Follows(if, _)
- Select a such that Follows(_, a)
- Select cs such that Follows(6, _) = True
- Select pn such that Follows(#, _) = False (# is out of range)

- Syntax Error: stmt s; assignment a1, a2; Select x such that Affects(a1, a2)
- Syntax Error: stmt s; assignment a1, a2; Select n1 such that Affects(a1, x)

/********* Affects* assignment (same procedure) *********/
// Affects*(#, #)


// Affects*(s, #)


// Affects*(s, s)


// Affects*(_, _)


- Syntax Error: stmt s; assignment a1, a2; Select x such that Affects*(a1, a2)
- Syntax Error: stmt s; assignment a1, a2; Select a1 such that Affects*(a1, x)

/********* Pattern *********/

/********* Combination *********/
// to include for and, with, .stmt#, .procName, .varName, etc.