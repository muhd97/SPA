1 - POSITIVE CASE (Same ref type)
stmt s;
Select s with s.stmt# = 5
5
5000
2 - POSITIVE CASE (Same ref type) with multiple ands
stmt s;
Select s with s.stmt# = 5 and s.stmt# = 12 and 3=3 

5000
3 - Empty output with one of the ands being false
stmt s;
Select s with s.stmt# = 5 and s.stmt# = 13

5000
4 - NEGATIVE CASE - Show error message for different with types
stmt s; variable v;
Select v with s.stmt#=v

5000
5 - NEGATIVE CASE - Show error message for different with types in the 3rd with clause
stmt s; variable v;
Select v with 1=2 and s.stmt# = 1 and s.stmt#=v

5000
6 - calls(string, string)
procedure p;
Select p such that Calls("Example", "p")

5000
7 - calls(string, syn)
procedure p;
Select p such that Calls("s", p)

5000
8 - calls(syn, syn)
procedure p1; procedure p2;
Select p2 such that Calls(p1, p2)
f1r511351, firsttest 
5000
9 - calls(syn, _)
procedure p2;
Select p2 such that Calls(p2, _)
firsttest, procedure
5000
10 - calls*(string, string)
procedure p;
Select p such that Calls*("Example", "r")

5000
11 - calls*(syn, string)
procedure p;
Select p such that Calls*(p, "r")

5000
12 - calls*(syn, syn)
procedure p1; procedure p2;
Select p2 such that Calls*(p1, p2)
f1r511351, firsttest 
5000
13 - calls*(syn, _)
procedure p2;
Select p2 such that Calls*(p2, _)
firsttest, procedure 
5000
14 - Select Call.procName
stmt s; assign a; variable v; call c;
Select c.procName such that Uses(c, v)
f1r511351, firsttest 
5000
15 - Select Call.stnt#
stmt s; assign a; variable v; call c;
Select c.stmt# such that Uses(c, v)
35, 38
5000
17 - Select <print.varName, v> such that Uses(p, v>
print p; variable v;
Select <p.varName, v> such that Uses(p, v)
rEKT rEKT, MorelikesixteenMC MorelikesixteenMC, SIX SIX, RIP RIP, whySoMuchWork whySoMuchWork, help help, rEsPeKt rEsPeKt, q q
5000
18 - Select <p, v> such that Uses(p, v)
print p; variable v;
Select <p, v> such that Uses(p, v)
24 rEKT, 4 MorelikesixteenMC, 21 help, 10 SIX, 22 help, 13 RIP, 17 RIP, 23 whySoMuchWork, 31 help, 37 rEsPeKt, 42 q 
5000
31 - Select <r.varName, f, c.procName, w.stmt#> such that Uses(c, v) and Parent(s, w) - NEGATIVE CASE, MULTIPLE INDEPENDENT SYNONYMS
stmt s; assign a; variable v; call c; print p; call f; read r; while w;
Select <r.varName, f, c.procName, w.stmt#> such that Uses(c, v) and Parent(s, w) and Parent*(a, w)

5000 
32 - Select <w, f, c.procName> such that Uses(c, v) - NEGATIVE CASE, MULTIPLE INDEPENDENT SYNONYMS
stmt s; constant z;assign a; variable v; call c; print p; call f; read r; while w; if ifs;
Select <w, f, c.procName, z> such that Uses(c, v) and Parent(s, w) and Parent*(a, w)

5000
34 - Select <c.stmt#, c.procName> - SAME SYNONYM, DIFF ATTRREF (independent)
stmt s; assign a; variable v; call c; print p; call f; read r; procedure procedure;
Select <c.stmt#, c.procName> such that Uses(s, _)
35 f1r511351, 38 firsttest 
5000
35 - Select <c.stmt#, c.procName> - SAME SYNONYM, DIFF ATTRREF, NEGATIVE CASE
stmt s; assign a; variable v; call c; print p; call f;if ifs; read r; procedure procedure;
Select <c.stmt#, c.procName> such that Parent*(ifs, _)
35 f1r511351, 38 firsttest 
5000
36 - Select <c, c> - SAME SYNONYM, SAME ATTRREF (independent)
stmt s; assign a; variable v; call c; print p; call f; read r; procedure procedure;
Select <c, c> such that Uses(s, _)
35 35, 38 38 
5000
37 - Select <c.procName, c.procName> - SAME SYNONYM, SAME ATTRREF (independent)
stmt s; assign a; variable v; call c; print p; call f; read r; procedure procedure;
Select <c.procName, c.procName> such that Uses(s, _)
f1r511351 f1r511351, firsttest firsttest 
5000
38 - Select <c, c> such that Uses (c, _) - SAME SYNONYM, SAME ATTRREF
stmt s; assign a; variable v; call c; print p; call f; read r; procedure procedure;
Select <c, c> such that Uses(c, _)
35 35, 38 38 
5000
39 - Select <c, c.procName> such that Uses (c, _) - SAME SYNONYM, SAME ATTRREF
stmt s; assign a; variable v; call c; print p; call f; read r; procedure procedure;
Select <c, c.procName> such that Uses(c, _)
35 f1r511351, 38 firsttest 
5000
40 - Select <c, c> - SAME SYNONYM, SAME ATTRREF (independent)
stmt s; assign a; variable v; call c; print p; call f; read r; procedure procedure;
Select <c, c>
35 35, 38 38 
5000
41 - Select <c, c.procName> such that Uses (c, _) - SAME SYNONYM, SAME ATTRREF
stmt s; assign a; variable v; call c; print p; call f; read r; procedure procedure;
Select <c, c.procName, c.stmt#, c.procName, c> such that Uses(c, _)
35 f1r511351 35 f1r511351 35, 38 firsttest 38 firsttest 38 
5000
42 - Select <w, c.stmt#, c.procName> such that Uses (w, _) - SAME SYNONYM, SAME ATTRREF (some independent)
stmt s; assign a; variable v; call c; print p; call f; read r; while w;procedure procedure;
Select <w, c, c.procName> such that Uses(w, _)
1 35 f1r511351, 14 35 f1r511351, 25 35 f1r511351, 33 35 f1r511351, 7 35 f1r511351, 26 35 f1r511351, 1 38 firsttest, 14 38 firsttest, 25 38 firsttest, 33 38 firsttest, 7 38 firsttest, 26 38 firsttest
5000
44 - Select BOOLEAN such that Uses(a, v) == TRUE
stmt s; assign a; variable v;
Select BOOLEAN such that Uses(a, v)
TRUE 
5000
45 - Select BOOLEAN such that Uses(w, v)
stmt s; assign a; variable v; while w;
Select BOOLEAN such that Uses(w, v)
TRUE 
5000
46 - Select <a, v> such that Uses(a, v)
stmt s; assign a; variable v; while w;
Select <a, v> such that Uses(a, v)
29 MorelikesixteenMC, 36 ByeBye, 18 MorelikesixteenMC, 9 SIX, 34 rEKT, 40 i, 41 x, 18 RIP, 41 y, 41 z 
5000
47 - Select a such that Uses(a, v)
stmt s; assign a; variable v; while w;
Select a such that Uses(a, v)
29, 36, 18, 9, 34, 40, 41 
5000
48 - Select v such that Uses(a, v)
stmt s; assign a; variable v; while w;
Select v such that Uses(a, v)
SIX, x, rEKT, MorelikesixteenMC, ByeBye, y, i, RIP, z 
5000
49 - Select <w, v> such that Uses(w, v) - NEGATIVE CASE
stmt s; assign a; variable v; while w;
Select <w, v> such that Uses(w, v)
1 SHAG, 14 pls, 25 whySoMuchWork, 33 whySoMuchWork, 7 FasterEnd, 26 pls, 1 pls, 1 eightmc, 1 RIP, 1 help, 1 sian, 1 ByeBye, 1 MorelikesixteenMC, 1 SIX, 1 FasterEnd, 1 rEKT, 1 whySoMuchWork, 1 q, 1 y, 1 i, 1 PressF, 1 x, 1 z, 14 FasterEnd, 25 eightmc, 25 pls, 25 MorelikesixteenMC, 33 RIP, 33 q, 33 y, 33 i, 33 PressF, 33 SHAG, 33 rEKT, 33 x, 33 z, 7 ByeBye, 7 RIP, 7 SIX, 7 pls
5000
50 - Select <a, v> such that Uses(a, v) such that Modifies(a2, v)
stmt s; assign a, a2; variable v; while w; print p;
Select <a, v> such that Uses(a, v) such that Follows(a, p)
9 SIX, 41 x, 41 y, 41 z 
5000
51 - Select <a, v> such that Uses(a, v) AND Modifies(a2, v)
stmt s; assign a, a2; variable v; while w; print p;
Select <a, v> such that Uses(a, v) and Follows(a, p)
9 SIX, 41 x, 41 y, 41 z
5000
52 - Select all Procedures - TargetSynonym Not in Uses (pr, v)
variable vwx, k; assign a; stmt x; procedure sdpp; print p; read r;
Select pp such that Uses(p, vwx)

5000
53 - Select <p, q> such that Uses(a, v) - TUPLE SYNONYMS NOT IN SUCH THAT CLAUSE
stmt s; assign a, a1; variable v, v1; while w; print p, q;
Select <p, q> such that Uses(a1, v1)
4 4, 4 10, 4 21, 4 13, 4 17, 4 22, 4 23, 4 24, 4 31, 4 37, 4 42, 10 4, 10 10, 10 21, 10 13, 10 17, 10 22, 10 23, 10 24, 10 31, 10 37, 10 42, 21 4, 21 10, 21 21, 21 13, 21 17, 21 22, 21 23, 21 24, 21 31, 21 37, 21 42, 13 4, 13 10, 13 21, 13 13, 13 17, 13 22, 13 23, 13 24, 13 31, 13 37, 13 42, 17 4 ,17 10, 17 21, 17 13, 17 17, 17 22, 17 23, 17 24 ,17 31, 17 37, 17 42, 22 4 ,22 10 ,22 21, 22 13, 22 17, 22 22, 22 23, 22 24 ,22 31, 22 37, 22 42, 23 4, 23 10, 23 21, 23 13, 23 17 ,23 22, 23 23, 23 24, 23 31, 23 37 ,23 42, 24 4, 24 10 ,24 21 ,24 13, 24 17 ,24 22 ,24 23, 24 24, 24 31, 24 37 ,24 42, 31 4, 31 10, 31 21, 31 13, 31 17, 31 22, 31 23 ,31 24, 31 31, 31 37, 31 42, 37 4, 37 10, 37 21, 37 13, 37 17, 37 22, 37 23, 37 24, 37 31 ,37 37 ,37 42, 42 4, 42 10, 42 21 ,42 13, 42 17 ,42 22, 42 23, 42 24, 42 31, 42 37, 42 42
5000
56 - Select BOOLEAN with NOTHING
stmt s; assign a, a1; variable v, v1; while w; print p, q; read r; call c, x;procedure proc; constant kc;
Select BOOLEAN
TRUE 
5000
57 - Select <c, v> such that Uses(a, v) and Follows(_, c) such that Modifies(c, "a") - NEGATIVE CASE: One of the such-that is empty
stmt s; assign a, a1; variable v, v1; while w; print p, q; read r; call c, x;procedure proc; constant kc;
Select <c, v> such that Uses(a, v) and Follows(_, c) such that Modifies(c, "a")

5000
58 - Select <c, v> such that Uses(a, v) and Follows(_, c) such that Modifies(c, "a") 
stmt s; assign a, a1; variable v, v1; while w; print p, q; read r; call c, x;procedure proc; constant kc;
Select <c, v> such that Uses(a, v) and Follows(_, c) such that Modifies(c, _)
35 SIX, 35 x, 35 rEKT, 35 MorelikesixteenMC, 35 ByeBye, 35 y, 35 i ,35 RIP, 35 z 
5000
59 - Select <c, v> such that Uses(a, v) and Follows(_, c) such that Modifies(c, "a") - NEGATIVE CASE: One of the pattern is empty
stmt s; assign a, a1; variable v, v1; while w; print p, q; read r; call c, x;procedure proc; constant kc;
Select <c, v> such that Uses(a, v) and Follows(_, c) such that Modifies(c, _) pattern a(_, "q")

5000
60 - Select <c, v> such that Uses(a, v) and Follows(_, c) such that Modifies(c, "a") - MANY DUPLICATES OF SAME CLAUSE
stmt s; assign a, a1; variable v, v1; while w; print p, q; read r; call c, x;procedure proc; constant kc;
Select <c, v> such that Uses(a, v) such that Uses(a, v) such that Uses(a, v) such that Uses(a, v) such that Uses(a, v) and Follows(_, c) such that Uses(a, v) such that Uses(a, v) and Follows(_, c) such that Uses(a, v) such that Uses(a, v) and Follows(_, c) such that Follows(_, c) such that Follows(_, c) such that Modifies(c, _) such that Modifies(c, _) such that Follows(_, c) such that Modifies(c, _) such that Modifies(c, _) such that Follows(_, c) such that Modifies(c, _) such that Modifies(c, _) such that Modifies(c, _) such that Modifies(c, _) such that Follows(_, c) such that Follows(_, c) such that Uses(a1, v1) such that Uses(a1, v1) such that Uses(a1, v1) such that Uses(a1, v1) such that Uses(a1, v1) such that Uses(a1, v1) such that Uses(a1, v1) such that Uses(a1, v1) such that Uses(a1, v1)
35 SIX, 35 x, 35 rEKT, 35 MorelikesixteenMC, 35 ByeBye, 35 y, 35 i, 35 RIP, 35 z
5000
62 - Select <c, v> - NEGATIVE CASE, many such that, pattern and with clauses. (Testing parsing with AND keyword)
stmt s; assign a, a1; variable v, v1; while w, j; if i,m; print p, q; read r; call c, x;procedure proc; constant kc; call cc; procedure pproc;
Select <c, v> such that Parent*(w, s) and Uses(w, v) and Modifies(a, a1) pattern a(_, "zz") and a(_, "qq") and a(_, "pql") with c.procName = p.procName and cc.procName = pproc.procName and cc.procName = proc.procName and c.procName = pproc.procName

5000
63 - Select c with c.procName = proc.procName
assign a; call c; procedure proc;
Select c with c.procName = proc.procName
35, 38
5000
64 - Select c with c.procName = proc.procName
assign a; call c; procedure proc;
Select c with proc.procName = c.procName
35, 38
5000
65 - Select c with c.procName = proc.procName
assign a; call c; procedure proc;
Select <c, proc> with c.procName = proc.procName
35 f1r511351, 38 firsttest
5000
66 - Select c with c.procName = proc.procName
assign a; call c; procedure proc;
Select <c.procName, proc> with c.procName = proc.procName
f1r511351 f1r511351, firsttest firsttest
5000
68 - 
stmt s;
Select <s,s> such that Follows*(4,6)

5000
70 -
while w; assign a;
Select <w,a> such that Parent*(w,a)
1 9, 25 29 ,33 34, 7 9, 1 18, 1 29, 1 36, 1 11, 1 20, 1 34, 7 11 
5000
71 - Multiple clauses with no common synonyms
stmt s; assign a; variable v; procedure p1, p2; 
Select s such that Calls (p1, p2) and Modifies (a, v) 
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 
5000
72 - Multiple clauses with more than 1 common synonym
assign a; variable v; procedure p1, p2; 
Select a such that Calls (p1, p2) and Modifies (p1, v) and Uses(p2 , v)
9, 11, 34, 18, 36, 20, 29, 39, 40, 41 
5000
73 - Valid both wildcards

Select BOOLEAN such that Next(_, _)
TRUE
5000
74 - Invalid first syn type, second wildcard
variable v;
Select v such that Next(v, _)

5000
75 - Valid first statement no. and second syn (checking while statements)
while w;
Select w such that Next(w, 17)

5000
76 - Valid first statement no. and second syn (checking correctness of if)
stmt s;
Select s such that Next*(8, s)
1, 10, 11, 12 ,13 ,14 ,15 ,16 ,17 ,18, 19, 2, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 3, 30, 31, 32, 33, 34, 35, 36, 37, 4 ,5, 6, 7, 8, 9 
5000
77 - Invalid first syn type, second wildcard 
constant c;
Select BOOLEAN such that Next*(c, _)
FALSE
5000
78 - Valid BOOLEAN query
assign a;
Select BOOLEAN with a.stmt# = 1
FALSE 
5000
79 - Valid first attrRef and second attrRef
constant c; stmt s;
Select <c, s> with c.value = s.stmt#
1 1, 2 2, 3 3, 37 37, 40 40 
5000
80 - Valid first IDENT and second attrRef
procedure p;
Select p with "first" = p.procName

5000
81 - Invalid first variable name, second wildcard, third wildcard
if ifs;
Select ifs pattern ifs("x", _, _)

5000
82 - Valid first syn, second and third wildcard
if ifs; variable v;
Select ifs.stmt# pattern ifs(v, _, _)
5, 32, 19 
5000
83 - Valid first syn, second and third wildcard
if ifs; variable v;
Select BOOLEAN pattern ifs(v, _, _)
TRUE
5000
84 - Invalid first variable name, second wildcard
while w; 
Select w pattern w("pp", _)

5000
85 - Valid first variable name and second wildcard
while w; 
Select w pattern w("I", _)

5000
86 - Invalid as first is wildcard
variable v;
Select a such that Modifies(_, v)

5000
87 - Invalid first read, second wildcard (syn not declared)
assign a;
Select a such that Modifies(r, _)

5000
88 - Valid first stmt# and second syn
variable v;
Select v such that Modifies(5, v)
SHAG, pls, MorelikesixteenMC ,ByeBye, SIX ,whySoMuchWork ,eightmc ,rEKT, p, sian, PressF, q, i, j 
5000
89 - Valid first syn and second wildcard
procedure p; stmt s;
Select s such that Modifies(p, _)
1, 10 ,11 ,12 ,13 ,14, 15, 16, 17, 18, 19, 2 ,20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 3, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 4, 40, 41, 42 ,43, 5, 6, 7, 8, 9 
5000
90 - Valid first syn and second wildcard
procedure p; stmt s;
Select s such that Uses(p, _)
1 ,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2 ,20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 3 ,30 ,31 ,32 ,33 ,34, 35, 36, 37, 38 ,39 ,4 ,40, 41, 42, 43, 5, 6, 7, 8, 9 
5000
91 - Single clause Next returns tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read r; prog_line n, n1;
Select <s, a> such that Next(s, a)
8 9 ,10 11, 33 34, 7 18, 32 36, 19 20, 26 29, 39 40, 40 41 
5000
92 - Single clause Next* returns BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read r; prog_line n, n1;
Select BOOLEAN such that Next*(_, 7)
TRUE 
5000
93 -  Multiple clauses Next returns syn sttribute
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read r; prog_line n, n1;
Select r.stmt# such that Next(s, r) and Next(r, _)
2 ,27 ,3 ,6, 28, 12, 15, 16, 30 
5000
94 - Single clause Calls returns tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read re; prog_line n, n1;
Select <p, p1> such that Calls(p, q)
firsttest firsttest ,procedure firsttest, firsttest procedure, procedure procedure ,firsttest f1r511351, procedure f1r511351 
5000
95 - Single clause Calls* returns syn attribute
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read r; prog_line n, n1;
Select cl.stmt# such that Calls(p,_)
35 ,38 
5000
96 -  Multiple clauses Calls returns tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read r; prog_line n, n1;
Select <p, q> such that Calls*(p, q) and Calls*(p,_)
firsttest f1r511351, procedure f1r511351 ,procedure firsttest 
5000
98 -  Single with clause returns tuple
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read r; prog_line n, n1;
Select <p, c> with s.stmt# = c.value
firsttest 1 ,procedure 1, f1r511351 1, firsttest 2 ,procedure 2 ,f1r511351 2, firsttest 3 ,procedure 3, f1r511351 3, firsttest 37 ,procedure 37, f1r511351 37 ,firsttest 40 ,procedure 40 ,f1r511351 40 
5000
99 -  Single with clause returns attribute
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read r; prog_line n, n1;
Select v.varName with v.varName = "i"
i
5000
100 -  Multiple with clauses returns BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read r; prog_line n, n1;
Select BOOLEAN with s.stmt# = c.value and c.value = n
TRUE 
5000
101 -  Multiple pattern clauses returns BOOLEAN
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read r; prog_line n, n1;
Select BOOLEAN pattern w(v,_) pattern ifs(v,_,_)
TRUE 
5000
103 -  Multiple pattern clauses returns attribute
stmt s, s1, s2; assign a, a1; while w, w1; if ifs, ifs1; variable v, v1; procedure p, q, p1; constant c, c1; call cl; print pn; read r; prog_line n, n1;
Select v.varName pattern w(v1,_) pattern ifs(v1,_,_) pattern a(v1,_)
pls, SHAG, RIP, eightmc, sian, help ,SIX, whySoMuchWork, ByeBye ,MorelikesixteenMC ,FasterEnd, p ,rEKT ,PressF ,rEsPeKt, i, j, x, y, z, q 
5000